<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!--
Created by Luke Mazzu on 2017.04.16
Copyright © 2017 Luke Mazzu. All rights reserved.
-->

<html  xmlns="http://www.w3.org/1999/xhtml"
       xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
       xmlns:h="http://xmlns.jcp.org/jsf/html"
       xmlns:f="http://xmlns.jcp.org/jsf/core"
       xmlns:p="http://primefaces.org/ui">

    <ui:composition template="/template/siteTemplate.xhtml">
        <ui:define name="title">
            <!-- Set the page title -->
            <h:outputText value="Edit Page"></h:outputText>
        </ui:define>

        <ui:define name="editableContent" >

            <div align="center">
                <h1>
                    <title>Edit Note</title>
                    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
                    <!--Include TinyMCE script-->

                    <!--This is the code of the editor part. To use tinymce script, you need to import the package to /resourse/js/ directory.
                    You can download from https://www.tinymce.com/download/.-->
                    <script src='resources/js/tinymce/tinymce.min.js'></script>
                    <script>
                        tinymce.init({
                            selector: 'textarea', // note the comma at the end of the line!
                            toolbar: 'example',

                            // These are basic parameters that define the UI of the editor. 
                            // “Plugins” defines what plugins will be supported in editor. 
                            // The toolbar defines what plugins show in the toolbar. 
                            // The customized plugins also defined here. (Save,submit)
                            // (These plugins are included in tinymce packages. /resource/js/tinymce/plugins. One can add more when needed)
                            width: '95%',
                            height: '400',
                            autoresize_min_height: '400',
                            autoresize_max_height: '800',
                            theme: 'modern',
                            plugins: [
                                'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                                'searchreplace wordcount visualblocks visualchars code fullscreen',
                                'insertdatetime media nonbreaking save table contextmenu directionality',
                                'emoticons template paste textcolor colorpicker textpattern imagetools codesample toc '
                            ],
                            toolbar1: 'save | submit | undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
                            toolbar2: 'print preview media | forecolor backcolor emoticons | codesample',
                            content_css: [
                                '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                                '//www.tinymce.com/css/codepen.min.css'
                            ],
                            //make a embedded template to the editor.
                            templates: [
                                {title: 'example1', description: 'cs3984template', url: 'EditorTemplate.html'}
                            ],

                            //This part controls the Save button. 
                            //The “save_enablewhendirty:” makes sure that the save button is disabled when no change is made in the textarea.
                            //The “save_onsavecallback:” defines what to run when save button is clicked or Crtl+S is fired. 
                            save_enablewhendirty: true,
                            save_onsavecallback: function saveContent() {
                                var cont = this.getContent();
                                passToJSFManagedBean([
                                    {
                                        name: 'content',
                                        value: cont
                                    }
                                ]);
                            }
                            ,
                            // Create the submit button for the editor from scratch.  
                            // I parse the content to the note controller and redirect to the Notes.xhtml.
                            setup: function (editor) {
                                editor.addButton('submit', {
                                    text: 'Submit',
                                    icon: false,
                                    onclick: function () {
                                        //  This part controls the logic of communicating with NoteController. 
                                        //  It is a little different  to use JavaScript to parse data to NoteController. 
                                        //  I choose to parse Json object to the controller.
                                        var cont = editor.getContent();
                                        passToJSFManagedBean([
                                            {
                                                name: 'content',
                                                value: cont
                                            }
                                        ]);
                                        window.location.href = 'Notes.xhtml';
                                    }
                                });
                            }
                            ,
                        }
                        );
                    </script>
                    <!--This is my approach of initialize the editor when the Editor.xhtml loaded.
                    Since there is no such tag in primeface that automatically run whenever the page is loaded. 
                    So i fake a click to a hidden link that is able to run whenever the page is loaded.-->
                    <script>
                        window.onload = function () {
                            document.getElementById('hidden:link').onclick();
                        }
                    </script>
                </h1>

                <!--<p:inputTextarea> is catched by the embedded JavaScript and converted to TinyMCE editor. 
                From the document of tinymce, it only support html tag <textarea>, 
                but I find out that the XML tag <p:inputTextarea> is also supported.  
                Notice, although it supports XML tag, the parameter of selector is still textarea.-->
                <h:form id="editorPart">
                    <div align ="left">
                        <h:outputLabel class="editorTitle" value="#{notesController.getEditorTitle()}" />
                    </div>
                    <div>&nbsp;</div>
                    <form method="post">
                        <p:inputTextarea id = "mytextarea2" value ="#{notesController.getEditorNote()}" queryDelay="0" minQueryLength="0" />
                    </form>
                    <!--The RequestParameter map will catch the Json object generated by Javascript and  parsed by <p:remoteCommand>.-->
                    <p:remoteCommand name="passToJSFManagedBean" id="passToJSFManagedBean2"
                                     action="#{notesController.save}"
                                     process="@this" autoRun="true" />
                </h:form>

                <h:form id="hidden" style="display:none">
                    <h:commandLink id="link">
                        <f:ajax event="click" listener="#{notesController.initialize()}" />
                    </h:commandLink>
                </h:form>
            </div>



            <!--embedded the attachments in the Editor.xhtml. 
            Users can free to upload, download and delete the attachments.-->  
            <h:form id="UserFileListForm">
                <div  style=" padding-left:30px">
                    <h2>Attachments</h2>
                    <p:dataTable id="attach" style="width: 50%"  value="#{userFileController.getItems()}" var="item"
                                 selectionMode="single" selection="#{userFileController.selected}"
                                 rowKey="#{item.id}"
                                 >

                        <p:column>
                            <f:facet name="header">
                                <h:outputText value="#{bundle.ListUserFileTitle_filename}"/>
                            </f:facet>
                            <div align="left">
                                <h:outputText value="#{item.filename}"/>
                            </div>

                            <div align="right">
                                <p:commandButton  ajax="false" 
                                                  icon="ui-icon-arrowthick-1-s"  value="Download" process="@this"   >
                                    <p:fileDownload value="#{fileDownloadManager.getFile(item)}" />
                                </p:commandButton>
                                <p:commandButton id="deleteButton" icon="ui-icon-trash"  value="Delete File" 
                                                 actionListener="#{userFileController.deleteSelectedUserFile(item)}" 
                                                 update="UserFileListForm" ajax="true"  />
                            </div>
                        </p:column>

                    </p:dataTable>
                    <h:form enctype="multipart/form-data">
                        <p:fileUpload  fileUploadListener="#{fileUploadManager.handleFileUpload}"
                                       mode="advanced"  update="messages,UserFileListForm"   id="atttachment" styleClass="att"/>                                <br/>
                        <p:growl id="messages" showDetail="true" />
                        <br/>
                    </h:form>
                </div>
            </h:form>

        </ui:define>
    </ui:composition >
</html>
